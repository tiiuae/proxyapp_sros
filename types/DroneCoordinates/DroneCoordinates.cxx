// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DroneCoordinates.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "DroneCoordinates.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

drone_interfaces::msg::DroneCoordinates::DroneCoordinates()
{
    // m_id com.eprosima.idl.parser.typecode.StringTypeCode@2b6856dd
    m_id ="";
    // m_coordinates com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@7c417213


}

drone_interfaces::msg::DroneCoordinates::~DroneCoordinates()
{


}

drone_interfaces::msg::DroneCoordinates::DroneCoordinates(
        const DroneCoordinates& x)
{
    m_id = x.m_id;
    m_coordinates = x.m_coordinates;
}

drone_interfaces::msg::DroneCoordinates::DroneCoordinates(
        DroneCoordinates&& x)
{
    m_id = std::move(x.m_id);
    m_coordinates = std::move(x.m_coordinates);
}

drone_interfaces::msg::DroneCoordinates& drone_interfaces::msg::DroneCoordinates::operator =(
        const DroneCoordinates& x)
{

    m_id = x.m_id;
    m_coordinates = x.m_coordinates;

    return *this;
}

drone_interfaces::msg::DroneCoordinates& drone_interfaces::msg::DroneCoordinates::operator =(
        DroneCoordinates&& x)
{

    m_id = std::move(x.m_id);
    m_coordinates = std::move(x.m_coordinates);

    return *this;
}

size_t drone_interfaces::msg::DroneCoordinates::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += geometry_msgs::msg::Point::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t drone_interfaces::msg::DroneCoordinates::getCdrSerializedSize(
        const drone_interfaces::msg::DroneCoordinates& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.id().size() + 1;

    current_alignment += geometry_msgs::msg::Point::getCdrSerializedSize(data.coordinates(), current_alignment);

    return current_alignment - initial_alignment;
}

void drone_interfaces::msg::DroneCoordinates::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_id;
    scdr << m_coordinates;

}

void drone_interfaces::msg::DroneCoordinates::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_id;
    dcdr >> m_coordinates;
}

/*!
 * @brief This function copies the value in member id
 * @param _id New value to be copied in member id
 */
void drone_interfaces::msg::DroneCoordinates::id(
        const std::string& _id)
{
    m_id = _id;
}

/*!
 * @brief This function moves the value in member id
 * @param _id New value to be moved in member id
 */
void drone_interfaces::msg::DroneCoordinates::id(
        std::string&& _id)
{
    m_id = std::move(_id);
}

/*!
 * @brief This function returns a constant reference to member id
 * @return Constant reference to member id
 */
const std::string& drone_interfaces::msg::DroneCoordinates::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
std::string& drone_interfaces::msg::DroneCoordinates::id()
{
    return m_id;
}
/*!
 * @brief This function copies the value in member coordinates
 * @param _coordinates New value to be copied in member coordinates
 */
void drone_interfaces::msg::DroneCoordinates::coordinates(
        const geometry_msgs::msg::Point& _coordinates)
{
    m_coordinates = _coordinates;
}

/*!
 * @brief This function moves the value in member coordinates
 * @param _coordinates New value to be moved in member coordinates
 */
void drone_interfaces::msg::DroneCoordinates::coordinates(
        geometry_msgs::msg::Point&& _coordinates)
{
    m_coordinates = std::move(_coordinates);
}

/*!
 * @brief This function returns a constant reference to member coordinates
 * @return Constant reference to member coordinates
 */
const geometry_msgs::msg::Point& drone_interfaces::msg::DroneCoordinates::coordinates() const
{
    return m_coordinates;
}

/*!
 * @brief This function returns a reference to member coordinates
 * @return Reference to member coordinates
 */
geometry_msgs::msg::Point& drone_interfaces::msg::DroneCoordinates::coordinates()
{
    return m_coordinates;
}

size_t drone_interfaces::msg::DroneCoordinates::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool drone_interfaces::msg::DroneCoordinates::isKeyDefined()
{
    return false;
}

void drone_interfaces::msg::DroneCoordinates::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}


