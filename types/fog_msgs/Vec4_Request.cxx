// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Vec4_Request.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Vec4_Request.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

fog_msgs::msg::Vec4_Request::Vec4_Request()
{
    // m_goal com.eprosima.idl.parser.typecode.SequenceTypeCode@40ef3420


}

fog_msgs::msg::Vec4_Request::~Vec4_Request()
{
}

fog_msgs::msg::Vec4_Request::Vec4_Request(
        const Vec4_Request& x)
{
    m_goal = x.m_goal;
}

fog_msgs::msg::Vec4_Request::Vec4_Request(
        Vec4_Request&& x)
{
    m_goal = std::move(x.m_goal);
}

fog_msgs::msg::Vec4_Request& fog_msgs::msg::Vec4_Request::operator =(
        const Vec4_Request& x)
{

    m_goal = x.m_goal;

    return *this;
}

fog_msgs::msg::Vec4_Request& fog_msgs::msg::Vec4_Request::operator =(
        Vec4_Request&& x)
{

    m_goal = std::move(x.m_goal);

    return *this;
}

size_t fog_msgs::msg::Vec4_Request::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

size_t fog_msgs::msg::Vec4_Request::getCdrSerializedSize(
        const fog_msgs::msg::Vec4_Request& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.goal().size() > 0)
    {
        current_alignment += (data.goal().size() * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }



    return current_alignment - initial_alignment;
}

void fog_msgs::msg::Vec4_Request::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_goal;
}

void fog_msgs::msg::Vec4_Request::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_goal;}

/*!
 * @brief This function copies the value in member goal
 * @param _goal New value to be copied in member goal
 */
void fog_msgs::msg::Vec4_Request::goal(
        const std::vector<double>& _goal)
{
    m_goal = _goal;
}

/*!
 * @brief This function moves the value in member goal
 * @param _goal New value to be moved in member goal
 */
void fog_msgs::msg::Vec4_Request::goal(
        std::vector<double>&& _goal)
{
    m_goal = std::move(_goal);
}

/*!
 * @brief This function returns a constant reference to member goal
 * @return Constant reference to member goal
 */
const std::vector<double>& fog_msgs::msg::Vec4_Request::goal() const
{
    return m_goal;
}

/*!
 * @brief This function returns a reference to member goal
 * @return Reference to member goal
 */
std::vector<double>& fog_msgs::msg::Vec4_Request::goal()
{
    return m_goal;
}

size_t fog_msgs::msg::Vec4_Request::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool fog_msgs::msg::Vec4_Request::isKeyDefined()
{
    return false;
}

void fog_msgs::msg::Vec4_Request::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}


